{
  "id": "approval-gate-optimization",
  "title": "Approval Gate Optimization - Testable Review Process",
  "version": "1.0.0",
  "type": "sequence",
  "status": "active",
  "description": "Systematic approach to creating testable approval gates that enable conductors to validate changes before approval",
  "purpose": "Ensure every approval request includes testable, interactive elements that conductors can validate immediately",
  "scope": "All development work cycles requiring conductor approval",
  "commander_intent": "How do we create approval gates that give conductors something concrete to test and validate before approving changes?",
  "trigger_conditions": [
    "Development work requiring conductor approval",
    "Changes that need validation before proceeding",
    "Work cycles that need review and testing",
    "Complex changes requiring interactive validation"
  ],
  "sequence_steps": [
    {
      "step": 1,
      "action": "Identify Approval Requirements",
      "description": "Determine what needs to be validated and tested",
      "requirements": [
        "Understand what the conductor needs to validate",
        "Identify testable aspects of the changes",
        "Determine appropriate testing methods",
        "Define success criteria for approval"
      ]
    },
    {
      "step": 2,
      "action": "Create Testable Elements",
      "description": "Build interactive or demonstrable components for testing",
      "requirements": [
        "Create HTML test pages for web-based validation",
        "Build validation scripts for automated testing",
        "Provide live URLs or file paths for testing",
        "Include interactive elements where possible"
      ]
    },
    {
      "step": 3,
      "action": "Generate Approval Package",
      "description": "Package all testing elements with clear instructions",
      "requirements": [
        "Include test URLs and file paths",
        "Provide step-by-step testing instructions",
        "Include validation scripts and commands",
        "Add clear success/failure criteria"
      ]
    },
    {
      "step": 4,
      "action": "Present Approval Request",
      "description": "Present approval request with testable elements",
      "requirements": [
        "Include all test URLs and instructions",
        "Provide immediate testing capabilities",
        "Show validation results if available",
        "Make approval decision easy and informed"
      ]
    },
    {
      "step": 5,
      "action": "Handle Approval Response",
      "description": "Process conductor approval or feedback",
      "requirements": [
        "Address any testing issues found",
        "Fix validation failures if any",
        "Proceed with work cycle on approval",
        "Document any learnings for future gates"
      ]
    }
  ],
  "success_criteria": [
    "Conductor can test changes immediately",
    "Approval decision is based on concrete validation",
    "No approval requests without testable elements",
    "Validation process is clear and accessible",
    "Approval gates reduce review time and improve quality"
  ],
  "approval_gate_standards": {
    "testable_elements": [
      "Interactive HTML pages for web-based testing",
      "Validation scripts with clear output",
      "Live URLs or file paths for direct access",
      "Automated tests with pass/fail results",
      "Demo environments or preview deployments"
    ],
    "commit_confirmation": {
      "default_mode": "REVIEWER",
      "mode_switching": {
        "[AUTO]": "Switch to AUTONOMOUS mode",
        "[CONFIRM]": "Switch to REVIEWER mode",
        "proceed autonomously": "Switch to AUTONOMOUS mode",
        "confirm before committing": "Switch to REVIEWER mode"
      },
      "commit_request_format": {
        "files_to_commit": "List of files to be committed",
        "commit_message": "Proposed commit message",
        "reason": "Why this commit is needed",
        "test_urls": "Any applicable test URLs",
        "confirmation": "Should I proceed with this commit? [Y/N]"
      }
    },
    "presentation_format": [
      "Clear test URLs and instructions",
      "Validation results and status",
      "Step-by-step testing procedures",
      "Success criteria and expected outcomes",
      "Fallback testing methods if needed"
    ],
    "validation_methods": {
      "web_based": "HTML pages, live demos, interactive tools",
      "script_based": "Node.js scripts, validation commands",
      "api_based": "REST endpoints, health checks, status endpoints",
      "file_based": "Direct file access, configuration validation"
    }
  },
  "examples": {
    "registry_validation": {
      "testable_element": "test-registry.html",
      "validation_script": "scripts/validate-registry.js",
      "test_urls": ["file:///path/to/test-registry.html", "file:///path/to/aisop-config.json"],
      "success_criteria": "All 25 SOPs load successfully, no validation errors"
    },
    "api_endpoint": {
      "testable_element": "http://localhost:3000/api/health",
      "validation_script": "curl http://localhost:3000/api/health",
      "test_urls": ["http://localhost:3000/api/health"],
      "success_criteria": "API returns 200 status with valid JSON"
    },
    "netlify_preview": {
      "testable_element": "Netlify preview deployment",
      "validation_script": "npm run netlify:deploy:preview",
      "test_urls": ["https://feature-branch--app.netlify.app"],
      "success_criteria": "Preview loads successfully, functionality works"
    }
  },
  "critical_learnings": {
    "approval_gate_principle": {
      "principle": "Every approval request must include testable elements",
      "common_mistake": "Asking for approval without providing ways to test",
      "correct_approach": "Always include test URLs, validation scripts, or interactive demos",
      "pbj_test": "If a new agent needed conductor approval, could they provide testable elements?"
    },
    "immediate_testing": {
      "principle": "Conductors should be able to test immediately",
      "common_mistake": "Requiring setup or complex testing procedures",
      "correct_approach": "Provide one-click or simple testing methods",
      "pbj_test": "Could a conductor test this with minimal effort?"
    },
    "concrete_validation": {
      "principle": "Approval should be based on concrete validation",
      "common_mistake": "Subjective approval without clear criteria",
      "correct_approach": "Provide clear success/failure criteria and validation results",
      "pbj_test": "Is the approval decision based on objective, testable criteria?"
    }
  },
  "related_sops": ["work-cycle-protocol", "learning-documentation", "git-workflow"],
  "metadata": {
    "created": "2025-08-07",
    "last_updated": "2025-08-07",
    "created_by": "ai-assistant",
    "sequence_type": "approval_process",
    "priority": "high",
    "version_notes": "Created to optimize approval gates with testable elements based on conductor feedback"
  }
}
